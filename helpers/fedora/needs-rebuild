#!/bin/bash
#
# This file is part of Hawaii.
#
# Copyright (C) 2015-2016 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# Author(s):
#    Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# $BEGIN_LICENSE:GPL3$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 (with exceptions) or any
# later version accepted by Pier Luigi Fiorini, which shall act as a
# proxy defined in Section 14 of version 3 of the license.
#
# Exceptions are described in Hawaii GPL Exception version 1.0,
# included in the file GPL3_EXCEPTION.txt in this package.
#
# Any modifications to this file must keep this entire header intact.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $END_LICENSE$
#

specfilename=$1
repodir=$2

if [ -z "$specfilename" -o -z "$repodir" ]; then
    echo "Usage: $0 <SPEC> <REPODIR>"
    exit 1
fi

if [ ! -f $specfilename ]; then
    echo "File \"$specfilename\" not found!"
    exit 1
fi

if [ ! -d $repodir ]; then
    echo "Repository \"$repodir\" not found!"
    exit 1
fi

# Get source package name
name=$(/usr/bin/rpmspec -q --srpm --qf "%{name}\n" $specfilename | sed -e 's,^(none)$,,g')
if [ $? -ne 0 ]; then
    echo "Unable to get name from spec fiel \"$specfilename\""
    exit $?
fi

#
# EVR from spec file
#
spec_evr() {
    spec=$1

    epoch=$(/usr/bin/rpmspec -q --srpm --qf "%{epoch}\n" $spec | sed -e 's,^(none)$,0,g')
    version=$(/usr/bin/rpmspec -q --srpm --qf "%{version}\n" $spec | sed -e 's,^(none)$,,g')
    release=$(/usr/bin/rpmspec -q --srpm --qf "%{release}\n" $spec | sed -e 's,^(none)$,,g')

    if [ -z "$epoch" -o -z "$version" -o -z "$release" ]; then
        echo "Unable to retrieve EVR from \"$spec\""
        exit 1
    fi

    echo $release | grep -q "%{_checkout}"
    if [ $? -eq 0 ]; then
        # This is a CI package, replace %{_checkout} with the actual release
        pushd ../${name}-git >/dev/null
        gitdate=$(git log -1 --format="%cd" --date=short | tr -d '-')
        gitver=$(git log -1 --format="%h")
        checkout="${gitdate}git${gitver}"
        release=$(echo $release | sed -e "s,%{_checkout},$checkout,g")
        popd >/dev/null
    fi

    echo "${epoch}:${version}-${release}"
}

#
# NEVR from SRPM
#
srpm_name() {
    srpm=$1

    if [ ! -f $srpm ]; then
        echo "Source RPM \"$srpm\" not found!"
        exit 1
    fi

    if [ -z "$name" ]; then
        echo "Unable to retrieve name from \"$srpm\""
        exit 1
    fi

    /usr/bin/rpm -qp --qf "%{name}\n" $srpm | sed -e 's,^(none)$,,g'
}

srpm_evr() {
    srpm=$1

    if [ ! -f $srpm ]; then
        echo "Source RPM \"$srpm\" not found!"
        exit 1
    fi

    epoch=$(/usr/bin/rpm -qp --qf "%{epoch}\n" $srpm | sed -e 's,^(none)$,0,g')
    version=$(/usr/bin/rpm -qp --qf "%{version}\n" $srpm | sed -e 's,^(none)$,,g')
    release=$(/usr/bin/rpm -qp --qf "%{release}\n" $srpm | sed -e 's,^(none)$,,g')

    if [ -z "$epoch" -o -z "$version" -o -z "$release" ]; then
        echo "Unable to retrieve NEVR from \"$srpm\""
        exit 1
    fi

    echo "${epoch}:${version}-${release}"
}

# Determine version from spec file


#
# Find the SRPM with the highest version
#
srpms=$(find ${repodir}/source -type f -name "${name}*.src.rpm")
if [ $? -ne 0 ]; then
    echo "Unable to find SRPMs, exiting..."
    exit $?
fi

last_evr=""
for srpm in $srpms; do
    evr=$(srpm_evr $srpm)

    if [ -z "$last_evr" ]; then
        last_evr=$evr
    else
        # rpmdev-vercmp returns 11 when EVR1 > EVR2
        /usr/bin/rpmdev-vercmp $evr $last_evr 2>&1 >/dev/null
        if [ $? -eq 11 ]; then
            last_evr=$evr
        fi
    fi
done

# If no SRPM was found we need to build
if [ -z "$last_evr" ]; then
    echo "yes"
    exit 0
fi

# Compare EVR1 with EVR2, we assume EVR1 is from the spec file and EVR2
# is from the last build
evr=$(spec_evr $specfilename)
#echo "Compare $evr to $last_evr" >/dev/stderr
/usr/bin/rpmdev-vercmp $evr $last_evr 2>&1 >/dev/null

# A note on rpmdev-vercm exit status:
#   - 0 if the EVR's are equal
#   - 11 if EVR1 is newer
#   - 12 if EVR2 is newer
#   - Other exit statuses indicate problems
ret=$?
if [ $ret -ne 0 -a $ret -ne 11 -a $ret -ne 12 ]; then
    echo "An error has occurred"
    exit $ret
fi

# Return a string saying "yes" or "no", return "yes" when
# EVR1 is greater than EVR2
if [ $ret -eq 11 ]; then
    echo "yes"
else
    echo "no"
fi
