# -*- python -*-
#
# This file is part of Hawaii.
#
# Copyright (C) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from hawaiibuildbot import archlinux, fedora

# Build master configuration
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("x86_64-archlinux-01", "password"),
               BuildSlave("x86_64-archlinux-02", "password"),
               BuildSlave("x86_64-fedora-01", "password")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the Hawaii packages clone.

from hawaiibuildbot.common.changes.gitpoller import GitPoller

c['change_source'] = []
# ArchLinux packages
c['change_source'].append(GitPoller(
        'git://github.com/hawaii-desktop/hawaii-pkgbuilds.git',
        workdir='gitpoller-workdir', branch='master',
        category='archlinux-ci',
        ignoredAuthors=["Buildbot <buildbot@hawaiios.org>"],
        pollAtLaunch=True, pollinterval=300))
# Fedora CI packages
fedora_sources = {
    "sddm-git": {
        "upstreamsrc": "git://github.com/sddm/sddm.git",
        "downstreamsrc": "https://bitbucket.org/hawaii-fedora-ci/sddm-git.git"
    }
}
for pkgname in fedora_sources.keys():
    for sourcetype in fedora_sources[pkgname].keys():
        c['change_source'].append(GitPoller(
                fedora_sources[pkgname][sourcetype],
                workdir='gitpoller-workdir', branch='master',
                category='fedora-ci',
                ignoredAuthors=["Buildbot <buildbot@hawaiios.org>"],
                pollAtLaunch=True, pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter

c['schedulers'] = []

# Rebuild ArchLinux packages when a change is submitted
c['schedulers'].append(SingleBranchScheduler(
                            name="archlinux-checkin",
                            change_filter=filter.ChangeFilter(branch='master', category='archlinux-ci'),
                            treeStableTimer=None,
                            builderNames=["archlinux-i686", "archlinux-x86_64"]))
# Manually trigger a rebuild of the ArchLinux repository
c['schedulers'].append(ForceScheduler(
                            name="archlinux-manual", label="Build ArchLinux repository",
                            builderNames=["archlinux-i686", "archlinux-x86_64"]))
c['schedulers'].append(Triggerable(
                            name="archlinux-repository",
                            builderNames=["archlinux-i686", "archlinux-x86_64"]))

# Rebuild Fedora packages when a change is submitted
c['schedulers'].append(SingleBranchScheduler(
                            name="fedora-ci-checkin",
                            change_filter=filter.ChangeFilter(branch='master', category='fedora-ci'),
                            treeStableTimer=None,
                            builderNames=["fedora-ci-i686", "fedora-ci-x86_64"]))
# Manually trigger a rebuild of the Fedora repository
c['schedulers'].append(ForceScheduler(
                            name="fedora-ci-manual", label="Build Fedora repository",
                            builderNames=["fedora-ci-i686", "fedora-ci-x86_64"]))
c['schedulers'].append(Triggerable(
                            name="fedora-ci-repository",
                            builderNames=["fedora-ci-i686", "fedora-ci-x86_64"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git

# Factory for repository builds
pkgbuilds_gitrepo=Git(repourl="git://github.com/hawaii-desktop/hawaii-pkgbuilds.git", mode="incremental")
factories = {
    'archlinux': {
        'i686': archlinux.RepositoryFactory([pkgbuilds_gitrepo], arch="i686"),
        'x86_64': archlinux.RepositoryFactory([pkgbuilds_gitrepo], arch="x86_64")
    },
}

from buildbot.config import BuilderConfig

c['builders'] = []
# ArchLinux
c['builders'].append(
    BuilderConfig(name="archlinux-i686",
      slavenames=["x86_64-archlinux-01"],
      factory=factories["archlinux"]["i686"]))
c['builders'].append(
    BuilderConfig(name="archlinux-x86_64",
      slavenames=["x86_64-archlinux-02"],
      factory=factories["archlinux"]["x86_64"]))
# Fedora
c['builders'].append(
    BuilderConfig(name="fedora-ci-i686",
      slavenames=["x86_64-fedora-01"],
      factory=fedora.CiFactory(fedora_sources, arch="i686", distro="22")))
c['builders'].append(
    BuilderConfig(name="fedora-ci-x86_64",
      slavenames=["x86_64-fedora-01"],
      factory=fedora.CiFactory(fedora_sources, arch="x86_64", distro="22")))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Hawaii"
c['titleURL'] = "https://hawaii-desktop.github.io"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8020/"

# minimalistic config to activate new web UI
from buildbot.www import auth

c['www'] = dict(port=8020,
                plugins=dict(waterfall_view={}, console_view={}),
                auth=auth.UserPasswordAuth([('pierluigi.fiorini@gmail.com', 'password')]))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
