#!/bin/bash
#
# This file is part of Hawaii.
#
# Copyright (C) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# Author(s):
#    Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# $BEGIN_LICENSE:GPL3$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 (with exceptions) or any
# later version accepted by Pier Luigi Fiorini, which shall act as a
# proxy defined in Section 14 of version 3 of the license.
#
# Exceptions are described in Hawaii GPL Exception version 1.0,
# included in the file GPL3_EXCEPTION.txt in this package.
#
# Any modifications to this file must keep this entire header intact.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $END_LICENSE$
#

import os, sys

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--srcconfig", help="base mock configuration", type=str)
    parser.add_argument("--dstconfig", help="resulting mock configuration", type=str)
    parser.add_argument("--profile", help="custom profile", type=str)
    args = parser.parse_args()

    # If the configuration is newer than the chroot cache, mock will recreate it.
    # In order to avoid that we do not rewrite the configuration.
    if os.path.exists(args.dstconfig):
        sys.exit(0)

    config_opts = {}

    # Read base configuration
    with open(args.srcconfig, "r") as f:
        code = compile(f.read(), "mock_config", "exec")
        f.close()
    exec(code)

    # Root is called just like config (without extention)
    config_opts["root"] = args.dstconfig[:-4]

    # Add custom options
    if args.profile == "image":
        config_opts["chroot_setup_cmd"] = "install bash coreutils dbus-python dmraid yum selinux-policy-targeted livecd-tools fedora-kickstarts spin-kickstarts"
    elif args.profile == "appliance":
        config_opts["chroot_setup_cmd"] = "install bash coreutils grub parted selinux-policy shadow-utils policycoreutils appliance-tools fedora-kickstarts spin-kickstarts"

    # Macros
    if not config_opts.has_key("macros"):
        config_opts["macros"] = {}
    config_opts["macros"]["%vendor"] = "Hawaii"
    config_opts["macros"]["%packager"] = "Hawaii"
    config_opts["macros"]["%distribution"] = "Hawaii"

    # Write configuration
    parts = ["""# Autogenerated by the Hawaii build system
"""]
    parts.append("\n")
    for k, v in config_opts.iteritems():
        parts.append("config_opts[%r] = %r\n" % (k, v))
    parts.append("\n")
    f = open(args.dstconfig, "w")
    f.write("".join(parts))
    f.close()
