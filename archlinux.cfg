# -*- python -*-
# ex: set syntax=python:
#
# Copyright (C) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# Build master configuration for ArchLinux packages.
#

from hawaiibuildbot import archlinux

# Build master configuration
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("slave1", "password"),
               BuildSlave("slave2", "password")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the Hawaii packages clone.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/hawaii-desktop/hawaii-pkgbuilds.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter

c['schedulers'] = []
# Rebuild packages when a change is submitted
c['schedulers'].append(SingleBranchScheduler(
                            name="checkin",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["repository_i686", "repository_x86_64"]))
# Manually trigger a rebuild of the repository
c['schedulers'].append(ForceScheduler(
                            name="manual",
                            builderNames=["repository_i686", "repository_x86_64"]))
c['schedulers'].append(Triggerable(
                            name="repository",
                            builderNames=["repository_i686", "repository_x86_64"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git

# Factory for repository builds
i686_repository_factory = archlinux.RepositoryFactory(
                                Git(repourl="git://github.com/hawaii-desktop/hawaii-pkgbuilds.git", mode="incremental"),
                                arch="i686")
x86_64_repository_factory = archlinux.RepositoryFactory(
				Git(repourl="git://github.com/hawaii-desktop/hawaii-pkgbuilds.git", mode="incremental"),
				arch="x86_64")

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="repository_i686",
      slavenames=["slave1"],
      factory=i686_repository_factory))
c['builders'].append(
    BuilderConfig(name="repository_x86_64",
      slavenames=["slave2"],
      factory=x86_64_repository_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Hawaii"
c['titleURL'] = "https://hawaii-desktop.github.io"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8020/"

# minimalistic config to activate new web UI
from buildbot.www import auth

c['www'] = dict(port=8020,
                plugins=dict(waterfall_view={}, console_view={}),
                auth=auth.UserPasswordAuth([('pierluigi.fiorini@gmail.com', 'password')]))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
