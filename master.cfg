# -*- python -*-
#
# This file is part of Hawaii.
#
# Copyright (C) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# Author(s):
#    Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# $BEGIN_LICENSE:GPL3$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 (with exceptions) or any
# later version accepted by Pier Luigi Fiorini, which shall act as a
# proxy defined in Section 14 of version 3 of the license.
#
# Exceptions are described in Hawaii GPL Exception version 1.0,
# included in the file GPL3_EXCEPTION.txt in this package.
#
# Any modifications to this file must keep this entire header intact.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $END_LICENSE$
#

import os
from hawaiibuildbot import common, archlinux, fedora

BUILDMASTER_DIR = os.path.abspath(os.path.dirname(__file__))

# Read site configuration
import ConfigParser
config = ConfigParser.ConfigParser()
config.read([os.path.expanduser("~/.config/hawaii-builder.ini"),])

# Speedup JSON loads, from:
# http://docs.buildbot.net/current/manual/optimization.html
def speedup_json_loads():
    import json, re
    original_decode = json._default_decoder.decode
    my_regexp = re.compile(r'^\[\"([^"]*)\",\s+\"([^"]*)\"\]$')
    def decode_with_re(str, *args, **kw):
        m = my_regexp.match(str)
        try:
            return list(m.groups())
        except:
            return original_decode(str, *args, **kw)
    json._default_decoder.decode = decode_with_re
speedup_json_loads()

# Build master configuration
c = BuildmasterConfig = {}

####### MISC

image_repourl = "https://bitbucket.org/hawaii-fedora-ci/hawaii-kickstart.git"
channels = {"fedora-release": [], "fedora-ci": []}

# Repository architectures for Fedora
#  - i386:    32-bit PC (package architectures are: noarch, i686)
#  - x86_64:  64-bit PC (package architectures are: noarch, x86_64)
#  - armhfp:  ARM       (package architectures are: noarch, armv7hl)
#fedora_architectures = ("i386", "x86_64")
fedora_architectures = ("x86_64", )

# Image profiles
#  - pc:            PC (i386, x86_64)
#  - raspberrypi2:  Raspberry Pi 2 (armhfp)
#  - wandboard:     Wandboard Solo/Dual/Quad (armhfp)
image_profiles = {
    #"live": ("i386", "x86_64"),
    "live": ("x86_64", ),
    #"raspberrypi2": ("armhfp", ),
    #"wandboard": ("armhfp", )
}
image_builders = []
for profile in image_profiles:
    for arch in image_profiles[profile]:
        image_builders.append("image/{}/{}".format(profile, arch))

# Fedora version
fedora_version = "22"

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave

c["slaves"] = []
c["slaves"].append(BuildSlave("x86_64-archlinux-01", "password", max_builds=2))
c["slaves"].append(BuildSlave("armv7hl-archlinux-01", "password", max_builds=1))
c["slaves"].append(BuildSlave("x86_64-fedora-01", "password", max_builds=2))
c["slaves"].append(BuildSlave("armv7hl-fedora-01", "password", max_builds=1))
slaves = {
    "archlinux": {
        "i686": ["x86_64-archlinux-01", ],
        "x86_64": ["x86_64-archlinux-01", ],
        "armv7hl": ["armv7hl-archlinux-01", ]
    },
    "fedora": {
        "i386": ["x86_64-fedora-01", ],
        "x86_64": ["x86_64-fedora-01", ],
        "armhfp": ["armv7hl-fedora-01", ]
    }
}


# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)

c["protocols"] = {"pb": {"port": 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the Hawaii packages clone.

from buildbot.plugins import changes

all_repositories = {}

c['change_source'] = []
# ArchLinux packages
c['change_source'].append(changes.GitPoller(
        "git://github.com/hawaii-desktop/hawaii-pkgbuilds.git",
        workdir="gitpoller/archlinux/pkgbuilds",
        branches=["master",],
        category="archlinux-ci",
        pollAtLaunch=True,
        pollInterval=5*60))
# Fedora packages
sources = common.utils.loadYaml(os.path.join(BUILDMASTER_DIR, "channels", "fedora-release.yml"))
for pkg in sources:
    # Skip disabled packages
    if not pkg.get("enabled", True):
        continue
    # Append
    channels["fedora-release"].append(pkg)
    # Codebase
    all_repositories[pkg["repourl"]] = pkg["name"]
    # Git poller
    c["change_source"].append(changes.GitPoller(
            pkg["repourl"],
            workdir="gitpoller/fedora/{}".format(pkg["name"]),
            branches=[pkg.get("branch", "master")],
            project=pkg["name"],
            category="fedora-release",
            pollAtLaunch=True,
            pollInterval=5*60))
# Fedora CI packages
sources = common.utils.loadYaml(os.path.join(BUILDMASTER_DIR, "channels", "fedora-ci.yml"))
for pkg in sources:
    # Skip disabled packages
    if not pkg.get("enabled", True):
        continue
    # Append
    channels["fedora-ci"].append(pkg)
    # Git poller
    for sourcetype in ("upstream", "downstream"):
        # Codebase
        all_repositories[pkg[sourcetype]["repourl"]] = pkg["name"]
        # Git poller
        _workdir = "fedora/{}".format(pkg["name"]) if sourcetype == "downstream" else "upstream/{}".format(pkg["name"])
        c["change_source"].append(changes.GitPoller(
                pkg[sourcetype]["repourl"],
                workdir="gitpoller/{}".format(_workdir),
                branches=[pkg[sourcetype].get("branch", "master")],
                project=pkg["name"],
                category="fedora-ci",
                pollAtLaunch=True,
                pollInterval=pkg[sourcetype].get("pollInterval", 5*60)))
# Image
c['change_source'].append(changes.GitPoller(
        image_repourl,
        workdir="gitpoller/fedora/kickstarts",
        branches=["master",],
        category="image",
        pollAtLaunch=True,
        pollInterval=30*60))

####### CODEBASE GENERATOR

def codebaseGenerator(d):
    return all_repositories.get(d["repository"], "")

#c["codebaseGenerator"] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.timed import Nightly
from buildbot.plugins import util
from buildbot.changes import filter

c["schedulers"] = []

# Rebuild ArchLinux packages when a change is submitted
def ignore_buildbot_filter(change):
    """Ignore changes from buildbot itself."""
    if change.author == "Buildbot <buildbot@hawaiios.org>":
        return False
    return True
c["schedulers"].append(SingleBranchScheduler(
                            name="archlinux-checkin",
                            change_filter=filter.ChangeFilter(branch="master",
                                                              category="archlinux-ci",
                                                              filter_fn=ignore_buildbot_filter),
                            treeStableTimer=15*60,
                            builderNames=["archlinux-i686", "archlinux-x86_64"]))
# Manually trigger a rebuild of the ArchLinux repository
c["schedulers"].append(ForceScheduler(
                            name="archlinux-manual", label="Build ArchLinux repository",
                            builderNames=["archlinux-i686", "archlinux-x86_64"]))
c["schedulers"].append(Triggerable(
                            name="archlinux-repository",
                            builderNames=["archlinux-i686", "archlinux-x86_64"]))

# Fedora packages schedulers
for channel in channels.keys():
    # Manually trigger a complete repository build
    for arch in fedora_architectures:
        c["schedulers"].append(ForceScheduler(
                                    name="manual-{}-{}".format(channel, arch), label="Build Repository",
                                    builderNames=["channel/{}/{}".format(channel, arch)]))
    for pkg in channels[channel]:
        # List of builders for this package
        _builders = {}
        for arch in fedora_architectures:
            if arch not in pkg.get("architectures", fedora_architectures):
                continue
            _builders[arch] = "fedora/{}/{}".format(arch, pkg["name"])

        # Rebuild Fedora packages when a change is submitted
        c["schedulers"].append(SingleBranchScheduler(
                                    name="checkin-fedora-{}".format(pkg["name"]),
                                    change_filter=filter.ChangeFilter(project=pkg["name"], category=channel,
                                                                      branch=pkg.get("branch", "master")),
                                    treeStableTimer=pkg.get("treeStableTimer", 10*60),
                                    builderNames=_builders.values()))
        # Manually trigger a rebuild of a package
        c["schedulers"].append(ForceScheduler(
                                    name="manual-fedora-{}".format(pkg["name"]), label="Build {}".format(pkg["name"]),
                                    builderNames=_builders.values(),
                                    properties=[
                                        util.BooleanParameter(name="rebuild", label="Force a rebuild", default=False)
                                    ]))
        # Triggerables for the complete repository factory
        for arch in fedora_architectures:
            if arch not in pkg.get("architectures", fedora_architectures):
                continue
            c["schedulers"].append(Triggerable(
                                        name="trigger-fedora-{}-{}".format(arch, pkg["name"]),
                                        builderNames=[_builders[arch]]))
# Manually trigger a repository upload to master
for arch in fedora_architectures:
    c["schedulers"].append(ForceScheduler(
                                    name="sync-fedora-{}".format(arch), label="Synch Repository",
                                    builderNames=["sync/fedora/{}".format(arch)]))

# Rebuild images when a change is submitted
c["schedulers"].append(SingleBranchScheduler(
                    name="checkin-image",
                    change_filter=filter.ChangeFilter(branch="master", category="image"),
                    treeStableTimer=5*60,
                    builderNames=image_builders))
# Image schedulers
for profile in image_profiles:
    for arch in image_profiles[profile]:
        _builder = "image/{}/{}".format(profile, arch)
        # Build weekly images (Sunday at 3:00 AM)
        c["schedulers"].append(Nightly(name="weekly-image-{}-{}".format(profile, arch),
                                       branch="master",
                                       builderNames=[_builder],
                                       dayOfWeek=6, hour=3, minute=0))
        # Manually trigger a rebuild of the image
        c["schedulers"].append(ForceScheduler(
                                    name="manual-image-{}-{}".format(profile, arch),
                                    label="Build {} {} image".format(profile, arch),
                                    builderNames=[_builder]))
        c["schedulers"].append(Triggerable(
                                    name="trigger-image-{}-{}".format(profile, arch),
                                    builderNames=[_builder]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git

# Factory for repository builds
from buildbot.config import BuilderConfig

c["builders"] = []
# ArchLinux packages
pkgbuilds_gitrepo=Git(repourl="git@github.com:hawaii-desktop/hawaii-pkgbuilds.git", mode="incremental")
for arch in ("i686", "x86_64"):
    c["builders"].append(
        BuilderConfig(name="archlinux-{}".format(arch),
          slavenames=slaves["archlinux"][arch],
          factory=archlinux.RepositoryFactory([pkgbuilds_gitrepo], arch=arch)))
# Fedora packages
for channel in channels.keys():
    for pkg in channels[channel]:
        for arch in fedora_architectures:
            # Skip unsupported architectures
            if arch not in pkg.get("architectures", fedora_architectures):
                continue
            # Pick the right factory
            if channel == "fedora-release":
                _factory = fedora.PackageFactory(pkg, channel=channel, arch=arch, distro=fedora_version)
            else:
                _factory = fedora.CiPackageFactory(pkg, channel=channel, arch=arch, distro=fedora_version)
            # Configure the builder for this package and architecture
            c["builders"].append(
                BuilderConfig(name="fedora/{}/{}".format(arch, pkg["name"]),
                  slavenames=slaves["fedora"][arch],
                  factory=_factory))
    # Builder for the whole channel
    for arch in fedora_architectures:
        c["builders"].append(
            BuilderConfig(name="channel/{}/{}".format(channel, arch),
              slavenames=slaves["fedora"][arch],
              factory=fedora.RepositoryFactory(pkgs=channels[channel], arch=arch)))
# Synchronize Fedora repositories
for arch in fedora_architectures:
    c["builders"].append(
        BuilderConfig(name="sync/fedora/{}".format(arch),
          slavenames=slaves["fedora"][arch],
          factory=fedora.SyncFactory(arch=arch)))
# Image
for profile in image_profiles:
    for arch in image_profiles[profile]:
        c["builders"].append(
            BuilderConfig(name="image/{}/{}".format(profile, arch),
              slavenames=slaves["fedora"][arch],
              factory=fedora.ImageFactory(repourl=image_repourl, distro=fedora_version,
                                          profile=profile, arch=arch)))

####### STATUS TARGETS

# "status" is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c["status"] = []

####### PROJECT IDENTITY

# the "title" string will appear at the top of this buildbot
# installation"s html.WebStatus home page (linked to the
# "titleURL") and is embedded in the title of the waterfall HTML page.

c["title"] = "Hawaii"
c["titleURL"] = "http://hawaiios.org"

# the "buildbotURL" string should point to the location where the buildbot"s
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall "status" entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c["buildbotURL"] = config.get("Buildbot", "URL")

# minimalistic config to activate new web UI

clientId = config.get("GitHub", "ClientId")
clientSecret = config.get("GitHub", "ClientSecret")
c["www"] = dict(port=8020,
                plugins=dict(waterfall_view={}, console_view={}),
                auth=common.auth.GitHubAuth(clientId, clientSecret))

####### DB URL

c["db"] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    "db_url" : "sqlite:///state.sqlite",
}
