#!/usr/bin/python2
#
# This file is part of Hawaii.
#
# Copyright (C) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# Author(s):
#    Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# $BEGIN_LICENSE:GPL3$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 (with exceptions) or any
# later version accepted by Pier Luigi Fiorini, which shall act as a
# proxy defined in Section 14 of version 3 of the license.
#
# Exceptions are described in Hawaii GPL Exception version 1.0,
# included in the file GPL3_EXCEPTION.txt in this package.
#
# Any modifications to this file must keep this entire header intact.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $END_LICENSE$
#

import argparse, os, shutil
import rpmUtils.miscutils as rpmutils

# Find old packages to remove
def find_garbage(repodir):
    print "==> Find garbage on {}".format(repodir)
    garbage = []
    for path in ("source", "noarch", "i386", "x86_64"):
        # Skip missing directories
        fullpath = os.path.join(repodir, path)
        if not os.path.isdir(fullpath):
            continue
        # Find duplicates
        last_version = {}
        for rpm in os.listdir(fullpath):
            # Consider only (S)RPMs
            if not rpm.endswith(".rpm"):
                continue
            # Get NVREA
            n, v, r, e, a = rpmutils.splitFilename(rpm)
            if last_version.has_key(n):
                # Save EVR if it's the highest and put lower
                # versions into the garbage list
                result = rpmutils.compareEVR((e, v, r), last_version[n]["evr"])
                if result == 1:
                    garbage.append(last_version[n]["filename"])
                    last_version[n]["filename"] = os.path.join(repodir, path, rpm)
                    last_version[n]["evr"] = (e, v, r)
                elif result == -1:
                    garbage.append(os.path.join(repodir, path, rpm))
            else:
                # Save EVR for the first time
                last_version[n] = {"filename": os.path.join(repodir, path, rpm), "evr": (e, v, r)}
    return garbage

# Remove garbage
def clean(repodir, garbage):
    for filename in garbage:
        print("Remove {}".format(filename))
        os.unlink(filename)
    # Regenerate metadata
    drpms_path = os.path.join(repodir, "drpms")
    if os.path.isdir(drpms_path):
        shutil.rmtree(drpms_path)
    repodata_path = os.path.join(repodir, "repodata")
    if os.path.isdir(repodata_path):
        shutil.rmtree(repodata_path)
    print("Regenerate metadata on {}".format(repodir))
    os.system("createrepo --compress-type xz {}".format(repodir))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Repository cleanup and deduplication")
    parser.add_argument("repodir", metavar="DIR", type=str, help="Repository root")
    args = parser.parse_args()

    garbage = find_garbage(args.repodir)
    clean(args.repodir, garbage)
